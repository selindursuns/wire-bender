{"ast":null,"code":"var _jsxFileName = \"/Users/selindursun/my_wire_bender/client/src/DrawingArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DrawingArea() {\n  _s();\n  const [lines, setLines] = useState([]);\n  const [currentLine, setCurrentLine] = useState(null);\n  const svgRef = useRef(null);\n  const startLine = event => {\n    const svgRect = svgRef.current.getBoundingClientRect();\n    const x = event.clientX - svgRect.left;\n    const y = event.clientY - svgRect.top;\n    setCurrentLine({\n      x1: x,\n      y1: y,\n      x2: x,\n      y2: y\n    });\n  };\n  const drawLine = event => {\n    if (!currentLine) return;\n    const svgRect = svgRef.current.getBoundingClientRect();\n    const x = event.clientX - svgRect.left;\n    const y = event.clientY - svgRect.top;\n    setCurrentLine({\n      ...currentLine,\n      x2: x,\n      y2: y\n    });\n  };\n  const endLine = () => {\n    if (currentLine) {\n      const newLines = [...lines, currentLine];\n      setLines(newLines);\n      setCurrentLine(null);\n\n      // Sending the lines including the newly finished line\n      fetch('http://localhost:9000/receive-svg', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          lines: newLines\n        })\n      }).then(response => response.json()).then(data => console.log(data.message));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    onMouseDown: startLine,\n    onMouseMove: drawLine,\n    onMouseUp: endLine,\n    onMouseLeave: endLine // Optionally handle the mouse leaving the SVG area\n    ,\n    style: {\n      border: '1px solid black',\n      cursor: 'crosshair'\n    },\n    width: \"800\",\n    height: \"600\",\n    children: [lines.map((line, index) => /*#__PURE__*/_jsxDEV(\"line\", {\n      ...line,\n      stroke: \"black\",\n      strokeWidth: \"2\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)), currentLine && /*#__PURE__*/_jsxDEV(\"line\", {\n      ...currentLine,\n      stroke: \"red\",\n      strokeWidth: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 29\n    }, this), \"  // Visual feedback for the current line being drawn\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_s(DrawingArea, \"n/xzyGTtjMZmNouQH90lOoR0Vlw=\");\n_c = DrawingArea;\nexport default DrawingArea;\nvar _c;\n$RefreshReg$(_c, \"DrawingArea\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","DrawingArea","_s","lines","setLines","currentLine","setCurrentLine","svgRef","startLine","event","svgRect","current","getBoundingClientRect","x","clientX","left","y","clientY","top","x1","y1","x2","y2","drawLine","endLine","newLines","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","message","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","style","border","cursor","width","height","children","map","line","index","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/selindursun/my_wire_bender/client/src/DrawingArea.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nfunction DrawingArea() {\n    const [lines, setLines] = useState([]);\n    const [currentLine, setCurrentLine] = useState(null);\n    const svgRef = useRef(null);\n\n    const startLine = (event) => {\n        const svgRect = svgRef.current.getBoundingClientRect();\n        const x = event.clientX - svgRect.left;\n        const y = event.clientY - svgRect.top;\n        setCurrentLine({ x1: x, y1: y, x2: x, y2: y });\n    };\n    \n    const drawLine = (event) => {\n        if (!currentLine) return;\n        const svgRect = svgRef.current.getBoundingClientRect();\n        const x = event.clientX - svgRect.left;\n        const y = event.clientY - svgRect.top;\n        setCurrentLine({ ...currentLine, x2: x, y2: y });\n    };\n\n    const endLine = () => {\n        if (currentLine) {\n            const newLines = [...lines, currentLine];\n            setLines(newLines);\n            setCurrentLine(null);\n\n            // Sending the lines including the newly finished line\n            fetch('http://localhost:9000/receive-svg', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ lines: newLines })\n            })\n            .then(response => response.json())\n            .then(data => console.log(data.message));\n        }\n    };\n\n    return (\n        <svg\n            ref={svgRef}\n            onMouseDown={startLine}\n            onMouseMove={drawLine}\n            onMouseUp={endLine}\n            onMouseLeave={endLine} // Optionally handle the mouse leaving the SVG area\n            style={{ border: '1px solid black', cursor: 'crosshair' }}\n            width=\"800\"\n            height=\"600\"\n        >\n            {lines.map((line, index) => (\n                <line key={index} {...line} stroke=\"black\" strokeWidth=\"2\" />\n            ))}\n            {currentLine && <line {...currentLine} stroke=\"red\" strokeWidth=\"2\" />}  // Visual feedback for the current line being drawn\n        </svg>\n    );\n}\n\nexport default DrawingArea;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}