{"ast":null,"code":"var _jsxFileName = \"/Users/selindursun/my_wire_bender/client/src/DrawingArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DrawingArea() {\n  _s();\n  const [lines, setLines] = useState([]);\n  const svgRef = useRef(null);\n  const startLine = event => {\n    const rect = svgRef.current.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    setLines([...lines, {\n      x1: x,\n      y1: y,\n      x2: x,\n      y2: y\n    }]);\n  };\n  const drawLine = event => {\n    const rect = svgRef.current.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    const newLines = lines.slice(0, -1);\n    const lastLine = {\n      ...lines[lines.length - 1],\n      x2: x,\n      y2: y\n    };\n    setLines([...newLines, lastLine]);\n  };\n  const endLine = () => {\n    // Potentially here you could also handle sending the line data to the backend\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    onMouseDown: startLine,\n    onMouseMove: drawLine,\n    onMouseUp: endLine,\n    style: {\n      border: '1px solid black',\n      cursor: 'crosshair'\n    },\n    width: \"800\",\n    height: \"600\",\n    children: lines.map((line, index) => /*#__PURE__*/_jsxDEV(\"line\", {\n      ...line,\n      stroke: \"black\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_s(DrawingArea, \"9DyIQyNNOilMgPyKjL5H0JwDw6Y=\");\n_c = DrawingArea;\nexport default DrawingArea;\nvar _c;\n$RefreshReg$(_c, \"DrawingArea\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","DrawingArea","_s","lines","setLines","svgRef","startLine","event","rect","current","getBoundingClientRect","x","clientX","left","y","clientY","top","x1","y1","x2","y2","drawLine","newLines","slice","lastLine","length","endLine","ref","onMouseDown","onMouseMove","onMouseUp","style","border","cursor","width","height","children","map","line","index","stroke","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/selindursun/my_wire_bender/client/src/DrawingArea.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nfunction DrawingArea() {\n    const [lines, setLines] = useState([]);\n    const svgRef = useRef(null);\n\n    const startLine = (event) => {\n        const rect = svgRef.current.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        setLines([...lines, { x1: x, y1: y, x2: x, y2: y }]);\n    };\n\n    const drawLine = (event) => {\n        const rect = svgRef.current.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        const newLines = lines.slice(0, -1);\n        const lastLine = {...lines[lines.length - 1], x2: x, y2: y};\n        setLines([...newLines, lastLine]);\n    };\n\n    const endLine = () => {\n        // Potentially here you could also handle sending the line data to the backend\n    };\n\n    return (\n        <svg\n            ref={svgRef}\n            onMouseDown={startLine}\n            onMouseMove={drawLine}\n            onMouseUp={endLine}\n            style={{ border: '1px solid black', cursor: 'crosshair' }}\n            width=\"800\"\n            height=\"600\"\n        >\n            {lines.map((line, index) => (\n                <line key={index} {...line} stroke=\"black\" />\n            ))}\n        </svg>\n    );\n}\n\nexport default DrawingArea;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMQ,MAAM,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE3B,MAAMQ,SAAS,GAAIC,KAAK,IAAK;IACzB,MAAMC,IAAI,GAAGH,MAAM,CAACI,OAAO,CAACC,qBAAqB,CAAC,CAAC;IACnD,MAAMC,CAAC,GAAGJ,KAAK,CAACK,OAAO,GAAGJ,IAAI,CAACK,IAAI;IACnC,MAAMC,CAAC,GAAGP,KAAK,CAACQ,OAAO,GAAGP,IAAI,CAACQ,GAAG;IAClCZ,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE;MAAEc,EAAE,EAAEN,CAAC;MAAEO,EAAE,EAAEJ,CAAC;MAAEK,EAAE,EAAER,CAAC;MAAES,EAAE,EAAEN;IAAE,CAAC,CAAC,CAAC;EACxD,CAAC;EAED,MAAMO,QAAQ,GAAId,KAAK,IAAK;IACxB,MAAMC,IAAI,GAAGH,MAAM,CAACI,OAAO,CAACC,qBAAqB,CAAC,CAAC;IACnD,MAAMC,CAAC,GAAGJ,KAAK,CAACK,OAAO,GAAGJ,IAAI,CAACK,IAAI;IACnC,MAAMC,CAAC,GAAGP,KAAK,CAACQ,OAAO,GAAGP,IAAI,CAACQ,GAAG;IAClC,MAAMM,QAAQ,GAAGnB,KAAK,CAACoB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnC,MAAMC,QAAQ,GAAG;MAAC,GAAGrB,KAAK,CAACA,KAAK,CAACsB,MAAM,GAAG,CAAC,CAAC;MAAEN,EAAE,EAAER,CAAC;MAAES,EAAE,EAAEN;IAAC,CAAC;IAC3DV,QAAQ,CAAC,CAAC,GAAGkB,QAAQ,EAAEE,QAAQ,CAAC,CAAC;EACrC,CAAC;EAED,MAAME,OAAO,GAAGA,CAAA,KAAM;IAClB;EAAA,CACH;EAED,oBACI1B,OAAA;IACI2B,GAAG,EAAEtB,MAAO;IACZuB,WAAW,EAAEtB,SAAU;IACvBuB,WAAW,EAAER,QAAS;IACtBS,SAAS,EAAEJ,OAAQ;IACnBK,KAAK,EAAE;MAAEC,MAAM,EAAE,iBAAiB;MAAEC,MAAM,EAAE;IAAY,CAAE;IAC1DC,KAAK,EAAC,KAAK;IACXC,MAAM,EAAC,KAAK;IAAAC,QAAA,EAEXjC,KAAK,CAACkC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACnBvC,OAAA;MAAA,GAAsBsC,IAAI;MAAEE,MAAM,EAAC;IAAO,GAA/BD,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA4B,CAC/C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAAC1C,EAAA,CAvCQD,WAAW;AAAA4C,EAAA,GAAX5C,WAAW;AAyCpB,eAAeA,WAAW;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}