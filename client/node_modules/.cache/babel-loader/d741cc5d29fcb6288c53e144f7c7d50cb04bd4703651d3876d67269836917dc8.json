{"ast":null,"code":"var _jsxFileName = \"/Users/selindursun/my_wire_bender/client/src/DrawingArea.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DrawingArea() {\n  _s();\n  const [paths, setPaths] = useState([]);\n  const [currentPath, setCurrentPath] = useState(\"\");\n  const svgRef = useRef(null);\n  const startDrawing = event => {\n    const svgRect = svgRef.current.getBoundingClientRect();\n    const x = event.clientX - svgRect.left;\n    const y = event.clientY - svgRect.top;\n    setCurrentPath(`M ${x} ${y}`);\n  };\n  const draw = event => {\n    if (!currentPath) return;\n    const svgRect = svgRef.current.getBoundingClientRect();\n    const x = event.clientX - svgRect.left;\n    const y = event.clientY - svgRect.top;\n    setCurrentPath(currentPath + ` L ${x} ${y}`);\n  };\n  const endDrawing = () => {\n    if (currentPath) {\n      const newPaths = [...paths, currentPath];\n      setPaths(newPaths);\n      setCurrentPath(\"\");\n      sendDrawing(newPaths); // Send the drawing once the user finishes\n\n      // Sending the paths to the backend\n      // fetch('http://localhost:9000/receive-svg', {\n      //     method: 'POST',\n      //     headers: {\n      //         'Content-Type': 'application/json',\n      //     },\n      //     body: JSON.stringify({ paths })\n      // })\n      // .then(response => response.json())\n      // .then(data => console.log(data.message));\n    }\n  };\n  const sendDrawing = paths => {\n    fetch('http://localhost:9000/process-drawing', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        paths\n      })\n    }).then(response => response.json()).then(data => console.log('Processed Commands:', data.commands)).catch(error => console.error('Error sending drawing data:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    onMouseDown: startDrawing,\n    onMouseMove: draw,\n    onMouseUp: endDrawing,\n    style: {\n      border: '1px solid black',\n      cursor: 'crosshair'\n    },\n    width: \"830\",\n    height: \"550\",\n    viewBox: \"0 0 830 550\",\n    children: [paths.map((path, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n      d: path,\n      stroke: \"black\",\n      strokeWidth: \"2\",\n      fill: \"none\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)), currentPath && /*#__PURE__*/_jsxDEV(\"path\", {\n      d: currentPath,\n      stroke: \"red\",\n      strokeWidth: \"2\",\n      fill: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(DrawingArea, \"gCknICBLdqm5CwzCF03fEwTBh7I=\");\n_c = DrawingArea;\nexport default DrawingArea;\nvar _c;\n$RefreshReg$(_c, \"DrawingArea\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","DrawingArea","_s","paths","setPaths","currentPath","setCurrentPath","svgRef","startDrawing","event","svgRect","current","getBoundingClientRect","x","clientX","left","y","clientY","top","draw","endDrawing","newPaths","sendDrawing","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","commands","catch","error","ref","onMouseDown","onMouseMove","onMouseUp","style","border","cursor","width","height","viewBox","children","map","path","index","d","stroke","strokeWidth","fill","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/selindursun/my_wire_bender/client/src/DrawingArea.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nfunction DrawingArea() {\n    const [paths, setPaths] = useState([]);\n    const [currentPath, setCurrentPath] = useState(\"\");\n    const svgRef = useRef(null);\n\n    const startDrawing = (event) => {\n        const svgRect = svgRef.current.getBoundingClientRect();\n        const x = event.clientX - svgRect.left;\n        const y = event.clientY - svgRect.top;\n        setCurrentPath(`M ${x} ${y}`);\n    };\n\n    const draw = (event) => {\n        if (!currentPath) return;\n        const svgRect = svgRef.current.getBoundingClientRect();\n        const x = event.clientX - svgRect.left;\n        const y = event.clientY - svgRect.top;\n        setCurrentPath(currentPath + ` L ${x} ${y}`);\n    };\n\n    const endDrawing = () => {\n        if (currentPath) {\n            const newPaths = [...paths, currentPath];\n            setPaths(newPaths);\n            setCurrentPath(\"\");\n            sendDrawing(newPaths);  // Send the drawing once the user finishes\n\n            // Sending the paths to the backend\n            // fetch('http://localhost:9000/receive-svg', {\n            //     method: 'POST',\n            //     headers: {\n            //         'Content-Type': 'application/json',\n            //     },\n            //     body: JSON.stringify({ paths })\n            // })\n            // .then(response => response.json())\n            // .then(data => console.log(data.message));\n        }\n    };\n\n    const sendDrawing = (paths) => {\n        fetch('http://localhost:9000/process-drawing', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ paths })\n        })\n        .then(response => response.json())\n        .then(data => console.log('Processed Commands:', data.commands))\n        .catch(error => console.error('Error sending drawing data:', error));\n    };\n\n    return (\n        <svg\n            ref={svgRef}\n            onMouseDown={startDrawing}\n            onMouseMove={draw}\n            onMouseUp={endDrawing}\n            style={{ border: '1px solid black', cursor: 'crosshair' }}\n            width=\"830\"\n            height=\"550\"\n            viewBox=\"0 0 830 550\"\n        >\n            {paths.map((path, index) => (\n                <path key={index} d={path} stroke=\"black\" strokeWidth=\"2\" fill=\"none\" />\n            ))}\n            {currentPath && <path d={currentPath} stroke=\"red\" strokeWidth=\"2\" fill=\"none\" />}\n        </svg>\n    );\n}\n\nexport default DrawingArea;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}